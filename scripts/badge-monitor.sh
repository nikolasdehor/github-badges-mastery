#!/bin/bash

# üèÜ GitHub Badges Mastery - Monitor de Progresso
# Script para monitorar o progresso das ins√≠gnias do GitHub

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    echo -e "${PURPLE}=================================="
    echo -e "üèÜ GITHUB BADGES PROGRESS MONITOR"
    echo -e "Data: $(date '+%Y-%m-%d %H:%M:%S')"
    echo -e "==================================${NC}"
    echo
}

# Fun√ß√£o para verificar PRs
check_pull_shark() {
    echo -e "${BLUE}ü¶à PULL SHARK STATUS${NC}"
    echo "Crit√©rio: 2+ Pull Requests merged"
    
    if command -v gh &> /dev/null; then
        pr_count=$(gh pr list --state merged --author @me 2>/dev/null | wc -l || echo "0")
        echo -e "PRs merged: ${GREEN}$pr_count${NC}"
        
        if [ "$pr_count" -ge 2 ]; then
            echo -e "Status: ${GREEN}‚úÖ CONQUISTADA${NC}"
        else
            echo -e "Status: ${YELLOW}üîÑ Em progresso (faltam $((2 - pr_count)) PRs)${NC}"
        fi
    else
        echo -e "Status: ${RED}‚ùå GitHub CLI n√£o instalado${NC}"
    fi
    echo
}

# Fun√ß√£o para verificar co-autoria
check_pair_extraordinaire() {
    echo -e "${BLUE}üë• PAIR EXTRAORDINAIRE STATUS${NC}"
    echo "Crit√©rio: Co-autoria em commits"
    
    coauthor_commits=$(git log --grep="Co-authored-by" --oneline 2>/dev/null | wc -l || echo "0")
    echo -e "Commits com co-autoria: ${GREEN}$coauthor_commits${NC}"
    
    if [ "$coauthor_commits" -ge 1 ]; then
        echo -e "Status: ${GREEN}‚úÖ CONQUISTADA${NC}"
    else
        echo -e "Status: ${YELLOW}üîÑ Em progresso${NC}"
    fi
    echo
}

# Fun√ß√£o para verificar GitHub Actions
check_devops_guru() {
    echo -e "${BLUE}‚öôÔ∏è DEVOPS GURU STATUS${NC}"
    echo "Crit√©rio: GitHub Actions configuradas"
    
    workflow_count=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l || echo "0")
    echo -e "Workflows configurados: ${GREEN}$workflow_count${NC}"
    
    if [ "$workflow_count" -ge 1 ]; then
        echo -e "Status: ${GREEN}‚úÖ CONQUISTADA${NC}"
        
        # Verificar execu√ß√µes recentes
        if command -v gh &> /dev/null; then
            echo "Execu√ß√µes recentes:"
            gh run list --limit 3 2>/dev/null || echo "N√£o foi poss√≠vel verificar execu√ß√µes"
        fi
    else
        echo -e "Status: ${YELLOW}üîÑ Em progresso${NC}"
    fi
    echo
}

# Fun√ß√£o para verificar discuss√µes
check_galaxy_brain() {
    echo -e "${BLUE}üß† GALAXY BRAIN STATUS${NC}"
    echo "Crit√©rio: Discuss√µes aceitas"
    
    if command -v gh &> /dev/null; then
        # Verificar se discuss√µes est√£o habilitadas
        discussions_enabled=$(gh repo view --json hasDiscussionsEnabled --jq '.hasDiscussionsEnabled' 2>/dev/null || echo "false")
        
        if [ "$discussions_enabled" = "true" ]; then
            echo -e "Discuss√µes habilitadas: ${GREEN}‚úÖ${NC}"
            echo -e "Status: ${YELLOW}üîÑ Aguardando cria√ß√£o de discuss√µes${NC}"
        else
            echo -e "Discuss√µes habilitadas: ${RED}‚ùå${NC}"
            echo -e "Status: ${RED}‚è≥ Pendente (habilitar discuss√µes)${NC}"
        fi
    else
        echo -e "Status: ${RED}‚ùå GitHub CLI n√£o instalado${NC}"
    fi
    echo
}

# Fun√ß√£o para verificar issues r√°pidas
check_quickdraw() {
    echo -e "${BLUE}‚ö° QUICKDRAW STATUS${NC}"
    echo "Crit√©rio: Issue/PR criado em menos de 5 minutos"
    
    if command -v gh &> /dev/null; then
        recent_issues=$(gh issue list --limit 5 --state all 2>/dev/null | wc -l || echo "0")
        echo -e "Issues criadas: ${GREEN}$recent_issues${NC}"
        
        if [ "$recent_issues" -ge 1 ]; then
            echo -e "Status: ${GREEN}‚úÖ CONQUISTADA (via automa√ß√£o)${NC}"
        else
            echo -e "Status: ${YELLOW}üîÑ Em progresso${NC}"
        fi
    else
        echo -e "Status: ${RED}‚ùå GitHub CLI n√£o instalado${NC}"
    fi
    echo
}

# Fun√ß√£o para verificar rea√ß√µes
check_heart_on_sleeve() {
    echo -e "${BLUE}‚ù§Ô∏è HEART ON YOUR SLEEVE STATUS${NC}"
    echo "Crit√©rio: Rea√ß√µes em issues/PRs"
    echo -e "Status: ${YELLOW}üîÑ Aguardando implementa√ß√£o${NC}"
    echo "Pr√≥ximo passo: Adicionar rea√ß√µes em issues"
    echo
}

# Fun√ß√£o para verificar YOLO
check_yolo() {
    echo -e "${BLUE}üé≤ YOLO STATUS${NC}"
    echo "Crit√©rio: Merge sem review"
    echo -e "Status: ${YELLOW}üîÑ Aguardando implementa√ß√£o${NC}"
    echo "Pr√≥ximo passo: Configurar merge direto"
    echo
}

# Fun√ß√£o para gerar resumo
generate_summary() {
    echo -e "${PURPLE}üìä RESUMO GERAL${NC}"
    echo "=================================="
    
    total_badges=7
    conquered_badges=0
    
    # Contar badges conquistadas (simplificado)
    if command -v gh &> /dev/null; then
        pr_count=$(gh pr list --state merged --author @me 2>/dev/null | wc -l || echo "0")
        [ "$pr_count" -ge 2 ] && ((conquered_badges++))
    fi
    
    coauthor_commits=$(git log --grep="Co-authored-by" --oneline 2>/dev/null | wc -l || echo "0")
    [ "$coauthor_commits" -ge 1 ] && ((conquered_badges++))
    
    workflow_count=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l || echo "0")
    [ "$workflow_count" -ge 1 ] && ((conquered_badges++))
    
    echo -e "Ins√≠gnias conquistadas: ${GREEN}$conquered_badges${NC}/$total_badges"
    echo -e "Progresso: ${GREEN}$(( conquered_badges * 100 / total_badges ))%${NC}"
    
    if [ "$conquered_badges" -eq "$total_badges" ]; then
        echo -e "${GREEN}üéâ PARAB√âNS! Todas as ins√≠gnias foram conquistadas!${NC}"
    else
        echo -e "${YELLOW}üéØ Continue trabalhando para conquistar todas as ins√≠gnias!${NC}"
    fi
    echo
}

# Fun√ß√£o para salvar relat√≥rio
save_report() {
    report_file="badge-progress-$(date +%Y%m%d-%H%M%S).md"
    
    {
        echo "# üèÜ Relat√≥rio de Progresso das Ins√≠gnias"
        echo "**Data:** $(date '+%Y-%m-%d %H:%M:%S')"
        echo ""
        echo "## Status das Ins√≠gnias"
        echo ""
        echo "| Ins√≠gnia | Status | Observa√ß√µes |"
        echo "|----------|--------|-------------|"
        echo "| ü¶à Pull Shark | Em progresso | Verificar PRs merged |"
        echo "| üë• Pair Extraordinaire | Em progresso | Commits com co-autoria |"
        echo "| ‚öôÔ∏è DevOps Guru | Em progresso | Workflows configurados |"
        echo "| üß† Galaxy Brain | Pendente | Habilitar discuss√µes |"
        echo "| ‚ö° Quickdraw | Em progresso | Automa√ß√£o ativa |"
        echo "| ‚ù§Ô∏è Heart On Your Sleeve | Pendente | Implementar rea√ß√µes |"
        echo "| üé≤ YOLO | Pendente | Configurar merges diretos |"
        echo ""
        echo "## Pr√≥ximos Passos"
        echo "1. Continuar criando PRs para Pull Shark"
        echo "2. Habilitar discuss√µes para Galaxy Brain"
        echo "3. Implementar sistema de rea√ß√µes"
        echo "4. Configurar merges diretos para YOLO"
    } > "$report_file"
    
    echo -e "${GREEN}üìÑ Relat√≥rio salvo em: $report_file${NC}"
}

# Fun√ß√£o principal
main() {
    print_header
    check_pull_shark
    check_pair_extraordinaire
    check_devops_guru
    check_galaxy_brain
    check_quickdraw
    check_heart_on_sleeve
    check_yolo
    generate_summary
    
    # Perguntar se deve salvar relat√≥rio
    read -p "Deseja salvar um relat√≥rio detalhado? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        save_report
    fi
}

# Executar script
main "$@"
