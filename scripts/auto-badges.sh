#!/bin/bash

# ü§ñ GitHub Badges Mastery - Script de Automa√ß√£o Completa
# Script para conquistar m√∫ltiplas badges automaticamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    echo -e "${PURPLE}=================================="
    echo -e "ü§ñ AUTO BADGES CONQUEST SCRIPT"
    echo -e "Data: $(date '+%Y-%m-%d %H:%M:%S')"
    echo -e "==================================${NC}"
    echo
}

# Fun√ß√£o para log com timestamp
log() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')] $1${NC}"
}

# Fun√ß√£o para sucesso
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fun√ß√£o para erro
error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fun√ß√£o para warning
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    log "Verificando depend√™ncias..."
    
    if ! command -v git &> /dev/null; then
        error "Git n√£o encontrado!"
        exit 1
    fi
    
    if ! command -v gh &> /dev/null; then
        warning "GitHub CLI n√£o encontrado. Algumas funcionalidades ser√£o limitadas."
        return 1
    fi
    
    success "Depend√™ncias verificadas!"
    return 0
}

# Fun√ß√£o para Pull Shark automation
automate_pull_shark() {
    log "ü¶à Automatizando Pull Shark..."
    
    # Criar timestamp √∫nico
    timestamp=$(date +%s)
    branch_name="feature/auto-feature-$timestamp"
    
    # Criar nova branch
    git checkout main 2>/dev/null || git checkout -b main
    git checkout -b "$branch_name"
    
    # Criar arquivo de feature
    feature_file="features/auto-feature-$timestamp.md"
    mkdir -p features
    
    cat > "$feature_file" << EOF
# üöÄ Auto Feature $timestamp

Esta feature foi criada automaticamente pelo script de automa√ß√£o de badges.

## Descri√ß√£o
Feature implementada em $(date) para contribuir com a conquista da badge Pull Shark.

## Funcionalidades
- ‚úÖ Cria√ß√£o autom√°tica de conte√∫do
- ‚úÖ Commit com co-autoria
- ‚úÖ Branch estruturada
- ‚úÖ Documenta√ß√£o inclu√≠da

## Impacto nas Badges
- ü¶à Pull Shark: Contribui com +1 PR
- üë• Pair Extraordinaire: Commit com co-autoria
- ‚öôÔ∏è DevOps Guru: Pode ser usado em workflows

## Timestamp
Criado em: $(date)
Branch: $branch_name
EOF
    
    # Fazer commit com co-autoria
    git add "$feature_file"
    git commit -m "feat: implementar auto feature $timestamp

Feature criada automaticamente para badge Pull Shark.
Inclui documenta√ß√£o e estrutura padronizada.

Co-authored-by: GitHub Copilot <copilot@github.com>
Co-authored-by: Automation Bot <automation@badges-mastery.com>"
    
    success "Branch $branch_name criada com feature autom√°tica!"
    
    # Se GitHub CLI dispon√≠vel, criar PR
    if command -v gh &> /dev/null; then
        if gh auth status &> /dev/null; then
            log "Criando PR automaticamente..."
            gh pr create \
                --title "feat: auto feature $timestamp" \
                --body "ü§ñ Feature criada automaticamente para badge Pull Shark

## üéØ Objetivo
Contribuir para a conquista da badge Pull Shark atrav√©s de automa√ß√£o.

## üèÜ Badges Impactadas
- ü¶à Pull Shark: +1 PR
- üë• Pair Extraordinaire: Commit com co-autoria

## üîÑ Mudan√ßas
- Adicionado arquivo de feature em \`$feature_file\`
- Documenta√ß√£o completa inclu√≠da
- Commit seguindo padr√µes estabelecidos

## ü§ñ Automa√ß√£o
Este PR foi criado automaticamente pelo script \`auto-badges.sh\`." \
                --label "automation,pull-shark,feature" || warning "Falha ao criar PR via CLI"
        else
            warning "GitHub CLI n√£o autenticado. PR deve ser criado manualmente."
        fi
    fi
    
    return 0
}

# Fun√ß√£o para Pair Extraordinaire automation
automate_pair_extraordinaire() {
    log "üë• Automatizando Pair Extraordinaire..."
    
    # Verificar se h√° commits com co-autoria
    coauthor_count=$(git log --grep="Co-authored-by" --oneline | wc -l)
    
    if [ "$coauthor_count" -gt 0 ]; then
        success "J√° existem $coauthor_count commits com co-autoria!"
    else
        warning "Nenhum commit com co-autoria encontrado. Criando..."
        
        # Criar arquivo para commit com co-autoria
        echo "# Pair Programming Example" > pair-example.md
        echo "Este arquivo demonstra colabora√ß√£o para badge Pair Extraordinaire." >> pair-example.md
        echo "Criado em: $(date)" >> pair-example.md
        
        git add pair-example.md
        git commit -m "feat: adicionar exemplo de pair programming

Demonstra colabora√ß√£o para badge Pair Extraordinaire.

Co-authored-by: GitHub Copilot <copilot@github.com>
Co-authored-by: Pair Partner <pair@badges-mastery.com>"
        
        success "Commit com co-autoria criado!"
    fi
    
    return 0
}

# Fun√ß√£o para Quickdraw automation
automate_quickdraw() {
    log "‚ö° Automatizando Quickdraw..."
    
    if command -v gh &> /dev/null && gh auth status &> /dev/null; then
        timestamp=$(date '+%H:%M:%S')
        
        # Criar issue rapidamente
        gh issue create \
            --title "‚ö° Auto Issue - $timestamp" \
            --body "ü§ñ Issue criada automaticamente em menos de 5 minutos!

## üìã Detalhes
- Criada em: $(date)
- Script: auto-badges.sh
- Objetivo: Badge Quickdraw

## üéØ Pr√≥ximos Passos
- [ ] Verificar se badge foi conquistada
- [ ] Fechar issue ap√≥s verifica√ß√£o
- [ ] Documentar sucesso" \
            --label "quickdraw,automation" && success "Issue criada rapidamente!" || warning "Falha ao criar issue"
    else
        warning "GitHub CLI n√£o dispon√≠vel para Quickdraw automation"
    fi
    
    return 0
}

# Fun√ß√£o para DevOps Guru automation
automate_devops_guru() {
    log "‚öôÔ∏è Automatizando DevOps Guru..."
    
    if command -v gh &> /dev/null && gh auth status &> /dev/null; then
        # Verificar workflows existentes
        workflow_count=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)
        
        if [ "$workflow_count" -gt 0 ]; then
            success "$workflow_count workflows encontrados!"
            
            # Executar workflow se dispon√≠vel
            log "Executando workflows..."
            gh workflow run ci.yml 2>/dev/null && success "Workflow CI executado!" || warning "Falha ao executar workflow CI"
            gh workflow run auto-issue.yml 2>/dev/null && success "Workflow auto-issue executado!" || warning "Falha ao executar workflow auto-issue"
        else
            warning "Nenhum workflow encontrado!"
        fi
    else
        warning "GitHub CLI n√£o dispon√≠vel para DevOps Guru automation"
    fi
    
    return 0
}

# Fun√ß√£o para Heart On Your Sleeve automation
automate_heart_on_sleeve() {
    log "‚ù§Ô∏è Automatizando Heart On Your Sleeve..."
    
    if command -v gh &> /dev/null && gh auth status &> /dev/null; then
        # Listar issues para reagir
        issues=$(gh issue list --limit 3 --json number --jq '.[].number' 2>/dev/null)
        
        if [ -n "$issues" ]; then
            for issue in $issues; do
                # Adicionar rea√ß√µes via API
                gh api "repos/:owner/:repo/issues/$issue/reactions" -f content="+1" 2>/dev/null && log "Rea√ß√£o +1 adicionada √† issue #$issue"
                gh api "repos/:owner/:repo/issues/$issue/reactions" -f content="heart" 2>/dev/null && log "Rea√ß√£o ‚ù§Ô∏è adicionada √† issue #$issue"
                gh api "repos/:owner/:repo/issues/$issue/reactions" -f content="rocket" 2>/dev/null && log "Rea√ß√£o üöÄ adicionada √† issue #$issue"
            done
            success "Rea√ß√µes adicionadas √†s issues!"
        else
            warning "Nenhuma issue encontrada para reagir"
        fi
    else
        warning "GitHub CLI n√£o dispon√≠vel para Heart On Your Sleeve automation"
    fi
    
    return 0
}

# Fun√ß√£o para YOLO automation
automate_yolo() {
    log "üé≤ Automatizando YOLO..."
    
    if command -v gh &> /dev/null && gh auth status &> /dev/null; then
        # Verificar se h√° PRs abertos
        open_prs=$(gh pr list --json number --jq '.[].number' 2>/dev/null)
        
        if [ -n "$open_prs" ]; then
            for pr in $open_prs; do
                log "Fazendo merge direto do PR #$pr..."
                gh pr merge "$pr" --merge --delete-branch 2>/dev/null && success "PR #$pr merged via YOLO!" || warning "Falha ao fazer merge do PR #$pr"
                break # Fazer merge apenas do primeiro PR
            done
        else
            warning "Nenhum PR aberto encontrado para YOLO merge"
        fi
    else
        warning "GitHub CLI n√£o dispon√≠vel para YOLO automation"
    fi
    
    return 0
}

# Fun√ß√£o para gerar relat√≥rio
generate_report() {
    log "üìä Gerando relat√≥rio de automa√ß√£o..."
    
    report_file="automation-report-$(date +%Y%m%d-%H%M%S).md"
    
    {
        echo "# ü§ñ Relat√≥rio de Automa√ß√£o de Badges"
        echo "**Data:** $(date)"
        echo ""
        echo "## üìã A√ß√µes Executadas"
        echo ""
        echo "### ü¶à Pull Shark"
        echo "- ‚úÖ Branch autom√°tica criada"
        echo "- ‚úÖ Feature implementada"
        echo "- ‚úÖ Commit com co-autoria"
        echo ""
        echo "### üë• Pair Extraordinaire"
        coauthor_count=$(git log --grep="Co-authored-by" --oneline | wc -l)
        echo "- ‚úÖ Commits com co-autoria: $coauthor_count"
        echo ""
        echo "### ‚öôÔ∏è DevOps Guru"
        workflow_count=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)
        echo "- ‚úÖ Workflows configurados: $workflow_count"
        echo ""
        echo "### ‚ö° Quickdraw"
        echo "- ‚úÖ Issue autom√°tica criada"
        echo ""
        echo "### ‚ù§Ô∏è Heart On Your Sleeve"
        echo "- ‚úÖ Rea√ß√µes adicionadas"
        echo ""
        echo "### üé≤ YOLO"
        echo "- ‚úÖ Merge direto executado"
        echo ""
        echo "## üéØ Pr√≥ximos Passos"
        echo "1. Verificar badges conquistadas no perfil GitHub"
        echo "2. Executar script de monitoramento"
        echo "3. Documentar sucessos e falhas"
        echo ""
        echo "---"
        echo "**Gerado por:** auto-badges.sh"
        echo "**Vers√£o:** 1.0.0"
    } > "$report_file"
    
    success "Relat√≥rio salvo em: $report_file"
}

# Fun√ß√£o principal
main() {
    print_header
    
    # Verificar depend√™ncias
    check_dependencies
    has_gh_cli=$?
    
    echo
    log "üöÄ Iniciando automa√ß√£o completa de badges..."
    echo
    
    # Executar automa√ß√µes
    automate_pull_shark
    echo
    
    automate_pair_extraordinaire
    echo
    
    if [ $has_gh_cli -eq 0 ]; then
        automate_quickdraw
        echo
        
        automate_devops_guru
        echo
        
        automate_heart_on_sleeve
        echo
        
        automate_yolo
        echo
    else
        warning "Pulando automa√ß√µes que requerem GitHub CLI..."
        echo
    fi
    
    # Gerar relat√≥rio
    generate_report
    echo
    
    success "üéâ Automa√ß√£o completa finalizada!"
    echo
    echo -e "${BLUE}üí° Pr√≥ximos passos:${NC}"
    echo "1. Execute: npm run badges (para monitorar progresso)"
    echo "2. Verifique seu perfil GitHub para badges conquistadas"
    echo "3. Fa√ßa push das mudan√ßas para o reposit√≥rio remoto"
    echo "4. Crie PRs para branches criadas (se n√£o foram criados automaticamente)"
    echo
}

# Executar script
main "$@"
